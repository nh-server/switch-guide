import{_ as o,c as t,o as a,ae as n}from"./chunks/framework.DBofN92C.js";const p=JSON.parse('{"title":"Linux - Run payload injector without root","description":"","frontmatter":{},"headers":[],"relativePath":"extras/adding_udev.md","filePath":"extras/adding_udev.md"}'),i={name:"extras/adding_udev.md"};function d(l,e,r,u,s,c){return a(),t("div",null,e[0]||(e[0]=[n('<h1 id="linux-run-payload-injector-without-root" tabindex="-1">Linux - Run payload injector without root <a class="header-anchor" href="#linux-run-payload-injector-without-root" aria-label="Permalink to &quot;Linux - Run payload injector without root&quot;">​</a></h1><p>This section details how to add an <code>udev</code> rule to let you send a payload to your Switch without needing to use <code>sudo</code>.</p><p>The following instructions only work if you have a system that implements <code>udev</code>. Most modern distros come with <code>systemd</code> already installed, which includes a <code>udev</code> implementation.</p><p>Do the following instructions while your Switch is <em>not</em> connected to your computer.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>For Arch Linux users:</strong></p><p>The package <code>android-udev</code> includes rules that will also allow for payload injection to work without root. Do note this also allows Android specific commands such as <code>adb</code> and <code>fastboot</code> to also work without root (as is the intention of it.)</p></div><h2 id="option-1-manually-adding-rules-and-group" tabindex="-1">Option 1: Manually adding rules and group <a class="header-anchor" href="#option-1-manually-adding-rules-and-group" aria-label="Permalink to &quot;Option 1: Manually adding rules and group&quot;">​</a></h2><p>The following instructions are not for beginners. Only do this if you understand what you are doing.</p><h3 id="creating-a-new-group" tabindex="-1">Creating a new group <a class="header-anchor" href="#creating-a-new-group" aria-label="Permalink to &quot;Creating a new group&quot;">​</a></h3><p>To start, we will create a new group and add ourselves to it. The group the Nintendo Switch device will be owned by on Linux will be set to this group.</p><ol><li>Open a terminal.</li><li>Enter the following command: <code>sudo groupadd nintendo_switch</code>.</li><li>Enter your password when prompted.</li><li>Enter the following command: <code>sudo usermod -a -G nintendo_switch $USER</code>. Make sure that the <code>G</code> is capitalized!</li><li>Close the terminal.</li></ol><h3 id="adding-a-udev-rule" tabindex="-1">Adding a udev rule <a class="header-anchor" href="#adding-a-udev-rule" aria-label="Permalink to &quot;Adding a udev rule&quot;">​</a></h3><p>Next we&#39;re gonna add a new <code>udev</code> rule. <code>udev</code> is a device manager for the linux kernel. The rule we&#39;re gonna specify is that if the Switch is connected in <code>RCM</code>, the group the Switch belongs to will be the group we made in the previous section.</p><ol><li>Open a terminal.</li><li>Change to the root user with the following command: <code>sudo -i</code>. Enter your password when prompted.</li><li>Enter the following command: <code>mkdir -p /etc/udev/rules.d</code>.</li><li>Enter the following command: <code>echo &#39;SUBSYSTEMS==&quot;usb&quot;, ATTRS{manufacturer}==&quot;NVIDIA Corp.&quot;, ATTRS{product}==&quot;APX&quot;, GROUP=&quot;nintendo_switch&quot;&#39; &gt; /etc/udev/rules.d/10-switch.rules</code>.</li><li>Enter the following command: <code>udevadm control --reload</code>.</li><li>Enter the following command: <code>udevadm trigger</code>.</li><li>Logout and log back in.</li></ol><p>You should now be able to run the payload sender without having to use <code>sudo</code>.</p><h2 id="option-2-installing-a-package-with-the-rules" tabindex="-1">Option 2: Installing a package with the rules <a class="header-anchor" href="#option-2-installing-a-package-with-the-rules" aria-label="Permalink to &quot;Option 2: Installing a package with the rules&quot;">​</a></h2><p>These rules will actually allow <em>ANY</em> user to access your Switch via USB, not only <em>your</em> user.</p><p>You may just follow the instructions at <a href="https://github.com/pheki/nx-udev" target="_blank" rel="noreferrer">nx-udev</a>, or if you&#39;re on Ubuntu / Debian:</p><ol><li>Download <a href="https://github.com/pheki/nx-udev/releases/latest/download/nx-udev_latest_all.deb" target="_blank" rel="noreferrer">nx-udev_latest_all.deb</a>.</li><li>Open a terminal in the same directory as your download.</li><li>Run <code>sudo dpkg -i nx-udev_latest_all.deb</code> to install the package</li></ol><p>You should now be able to run the payload injector and homebrew with USB communication without having to use <code>sudo</code>.</p>',19)]))}const w=o(i,[["render",d]]);export{p as __pageData,w as default};
